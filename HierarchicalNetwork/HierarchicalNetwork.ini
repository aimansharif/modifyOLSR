# Generate a hierarchical network with two clusters and a single backbone.
# Cluster 1 contains nodes host[0], host[1], and gw[0] in a line topology
# Cluster 2 contains nodes gw[2], host[2], host[3], and host[4] in a line topology
# The backbone contains three nodes: gw[0], gw[1], and gw[2].
# The layout should look like this:
# h0 - h1 - gw0 - gw1 - gw2 - h2 - h3 - h4

[General]
network = OLSR
record-eventlog = true
sim-time-limit = 600s 
description = "Hierarchical Network: two clusters"

**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 500m
**.constraintAreaMaxY = 500m
**.constraintAreaMaxZ = 1m

# mobility: stationary, with us explicitly defining the initial node locations
**.mobilityType = "StationaryMobility"
**.mobility.initFromDisplayString = false

# Set up transmission range and MAC queue, values somewhat arbitrary
**.wlan[*].radio.maxDistance = 70m
**.wlan[*].mac.maxQueueSize = 20

#UDP Configs: each node runs one instance of UDPBasicApp.
**.numUdpApps = 1
**.udpApp[*].typename = "UDPBasicApp"
**.udpApp[*].stopTime=500s
**.udpApp[*].sendInterval=1s
**.udpApp[*].messageLength=1024B
**.udpApp[*].destPort=1000
**.udpApp[*].localPort=1000

# One local UDP exchange: 0->1 
# One remote UDP exchanges: 2->1
# 
# The local exchange will be successful, but routing across the backbone will fail,
# so host[1] should receive only 400 packets.
#
**.host[0].udpApp[*].destAddresses = "host[1]"
**.host[0].udpApp[*].startTime = 100s
**.host[2].udpApp[*].destAddresses = "host[1]"
**.host[2].udpApp[*].startTime = 100.2s

# Generate some traffic from a host (host[3]) to a GW (gw[1]) to exercise backbone routing
# should be successful because hosts have default routes and GWs know about each other
#
# Make sure that the destination is the IP address associated with the wlan[1] interface
# according to the documentation, we should be able to specify an interface and the 
# L3AddressResolver works this out, but no luck with the syntax so far. So instead we
# simply specify the gateway and hope for the best.
**.host[3].udpApp[*].destAddresses = "gw[1]"
**.host[3].udpApp[*].startTime = 100.5s

# Configure result collection
**.scalar-recording = true
**.vector-recording = true
**.printOLSRmessages = true

# configure routing and interface info
**.gw[*].manetrouting.announcedNetworks = "0.0.0.0/0.0.0.0"
**.configurator.dumpAddresses = true
**.configurator.dumpTopology = true
**.configurator.dumpRoutes = true
**.configurator.addStaticRoutes = false
**.configurator.addDefaultRoutes = false
**.configurator.addSubnetRoutes = false

# hosts have only one interface and one routing protocol instance
*.*.routing.typename="OLSR"
**.routingProtocol = "OLSR"
**.manetrouting.excludedInterfaces = "wlan1"
**.manetrouting.interfaces = "wlan0"
**.manetrouting.interface = "wlan0"

# gateways have two interfaces and two routing protocol instance
**.backboneRoutingProtocol = "OLSR"
**.backbonemanetrouting.excludedInterfaces = "wlan0"
**.backbonemanetrouting.interfaces = "wlan1"
**.backbonemanetrouting.interface = "wlan1"

#RADIO CONFIGS
**.wlan[*].bitrate = 2Mbps
**.isFlooding = false

**.hosts = 5
**.gw = 3

**.gw[0].*.initialX = 150m
**.gw[0].*.initialY = 300m

**.gw[1].*.initialX = 200m
**.gw[1].*.initialY = 300m

**.gw[2].*.initialX = 250m
**.gw[2].*.initialY = 300m


**.host[0].*.initialX = 50m
**.host[0].*.initialY = 300m

**.host[1].*.initialX = 100m
**.host[1].*.initialY = 300m

**.host[2].*.initialX = 300m
**.host[2].*.initialY = 300m

**.host[3].*.initialX = 350m
**.host[3].*.initialY = 300m

**.host[4].*.initialX = 400m
**.host[4].*.initialY = 300m


# configure IPv4 addresses
*.configurator.config = xml( \
"<config>\
		<interface hosts='gw[0] host[0] host[1]' names='wlan0' address='10.0.1.x' netmask='255.255.255.0'/>\
		<interface hosts='gw[2] host[2] host[3] host[4]' names='wlan0' address='10.0.2.x' netmask='255.255.255.0'/>\
		<interface hosts='gw[0] gw[1] gw[2]' names='wlan1' address='10.0.0.x' netmask='255.255.255.0'/>\
</config>")

# number of radios per host
*.gw[*].numRadios = 2
*.host[*].numRadios = 1
 
# number of channels used
**.channelControl.numChannels = 5

# wlan interface - radio channel assignemnt
**.gw[0].wlan[0].radio.channelNumber = 0
**.gw[1].wlan[0].radio.channelNumber = 4 # something high to avoid it, ideally we would turn this radio off
**.gw[2].wlan[0].radio.channelNumber = 1
**.gw[*].wlan[1].radio.channelNumber = 2
**.host[0].wlan[0].radio.channelNumber = 0
**.host[1].wlan[0].radio.channelNumber = 0
**.host[2].wlan[0].radio.channelNumber = 1
**.host[3].wlan[0].radio.channelNumber = 1
**.host[4].wlan[0].radio.channelNumber = 1

# include ../default.ini
